% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/models-deeplabv3.R
\name{model_deeplabv3}
\alias{model_deeplabv3}
\alias{model_deeplabv3_resnet50}
\alias{model_deeplabv3_resnet101}
\title{DeepLabV3 Models}
\usage{
model_deeplabv3_resnet50(
  pretrained = FALSE,
  progress = TRUE,
  num_classes = 21,
  aux_loss = NULL,
  pretrained_backbone = FALSE,
  ...
)

model_deeplabv3_resnet101(
  pretrained = FALSE,
  progress = TRUE,
  num_classes = 21,
  aux_loss = NULL,
  pretrained_backbone = FALSE,
  ...
)
}
\arguments{
\item{pretrained}{(bool): If TRUE, returns a model pre-trained on ImageNet.}

\item{progress}{(bool): If TRUE, displays a progress bar of the download to
stderr.}

\item{num_classes}{Number of output classes.}

\item{aux_loss}{Logical or NULL. If \code{TRUE}, includes an auxiliary classifier branch.
If \code{NULL} (default), the presence of aux classifier is inferred from pretrained weights.}

\item{pretrained_backbone}{If \code{TRUE} and \code{pretrained = FALSE}, loads
ImageNet weights for the ResNet backbone.}

\item{...}{Other parameters passed to the model implementation.}
}
\description{
Constructs DeepLabV3 semantic segmentation models with a ResNet backbone as
described in \emph{Rethinking Atrous Convolution for Semantic Image
Segmentation}. These models employ atrous spatial pyramid pooling to capture
multi-scale context.
}
\section{Functions}{
\itemize{
\item \code{model_deeplabv3_resnet50()}: DeepLabV3 with ResNet-50 backbone

\item \code{model_deeplabv3_resnet101()}: DeepLabV3 with ResNet-101 backbone

}}
\section{Task}{

Semantic image segmentation with 21 output classes by default (COCO).
}

\section{Input Format}{

The models expect input tensors of shape \code{(batch_size, 3, H, W)}. Typical
training uses 520x520 images.
}

\examples{
\dontrun{
# Use a publicly available image of an airplane
img_url <- "https://cdn.jetphotos.com/full/1/50847_1230239149.jpg"
img <- jpeg::readJPEG(img_url)

input <- transform_to_tensor(img)
input <- transform_resize(input, c(520, 520))
input <- input$unsqueeze(1)  # Add batch dimension (1, 3, H, W)

# DeepLabV3 with ResNet-50
model <- model_deeplabv3_resnet50(pretrained = TRUE)
model$eval()
output <- model(input)

mask_id <- output$out$argmax(dim = 2)  # (1, H, W)

# Show most frequent class
top_class_index <- mask_id$view(-1)$mode()[[1]]$item() + 1
cat("Most frequent class (ResNet-50):", model$classes[top_class_index], "\n")

# Only highlight 'aeroplane' class
mask_bool <- mask_id[1, ..]$eq(model$class_to_idx[["aeroplane"]])$unsqueeze(1)
segmented <- draw_segmentation_masks(input$squeeze(1), mask_bool, alpha = 0.6)
tensor_image_browse(segmented)

# DeepLabV3 with ResNet-101 (same steps)
model <- model_deeplabv3_resnet101(pretrained = TRUE)
model$eval()
output <- model(input)

mask_id <- output$out$argmax(dim = 2)
top_class_index <- mask_id$view(-1)$mode()[[1]]$item() + 1
cat("Most frequent class (ResNet-101):", model$classes[top_class_index], "\n")

mask_bool <- mask_id[1, ..]$eq(model$class_to_idx[["aeroplane"]])$unsqueeze(1)
segmented <- draw_segmentation_masks(input$squeeze(1), mask_bool, alpha = 0.6)
tensor_image_browse(segmented)
}
}
\seealso{
Other models: 
\code{\link{model_alexnet}()},
\code{\link{model_efficientnet}},
\code{\link{model_efficientnet_v2}},
\code{\link{model_fcn_resnet}},
\code{\link{model_inception_v3}()},
\code{\link{model_mobilenet_v2}()},
\code{\link{model_resnet}},
\code{\link{model_vgg}},
\code{\link{model_vit}}
}
\concept{models}
